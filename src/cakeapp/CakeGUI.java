/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package cakeapp;

import java.awt.HeadlessException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;

/**
 *
 * @author egshi
 */
public class CakeGUI extends javax.swing.JFrame {

    /**
     * Creates new form CakeGUI
     */
    
    private final CakeQueueInterface ovenQueue = new CakeQueue();
    
    // Constructor for the CakeGUI class
    public CakeGUI() {
        initComponents(); 
        initializeCakeNameBox(); // Populating the cake selection combo box for adding cakes
        initializeSearchNameBox(); // Populates the combo box for searching cakes
        initializeRemoveNameBox();  // Populates the combo box for removing cakes
    }
    
    // Initializing the combo box for adding cakes with cake name options
    private void initializeCakeNameBox(){
        cakeNameBox.removeAllItems(); // Clearing existing items in the combo box
        cakeNameBox.addItem("Select a cake"); // Default prompt item
        cakeNameBox.addItem("Pineapple cake"); // Adding pineapple cake to the list
        cakeNameBox.addItem("Strawberry cake"); // Adding strawberr cake to the list
        cakeNameBox.addItem("Chocolate cake"); // Adding chocolate cake to the list
        cakeNameBox.addItem("Vanilla cake"); // Adding vanilla cake to the list
        cakeNameBox.addItem("Plain cake"); // Adding plain cake to the list
    }
    
    // Initializing the combo box for searching cakes by name
    private void initializeSearchNameBox(){
        searchNameBox.removeAllItems(); // Clearing existing items in the combo box
        searchNameBox.addItem("Select a cake"); // Default prompt item
        searchNameBox.addItem("Pineapple cake");
        searchNameBox.addItem("Strawberry cake");
        searchNameBox.addItem("Chocolate cake");
        searchNameBox.addItem("Vanilla cake");
        searchNameBox.addItem("Plain cake");
    }

    // Initializing the combo box for removing cakes by name
    private void initializeRemoveNameBox(){
        removeNameBox.removeAllItems(); // Clearing existing items in the combo box
        removeNameBox.addItem("Select a cake"); // Default prompt item
        removeNameBox.addItem("Pineapple cake");
        removeNameBox.addItem("Strawberry cake");
        removeNameBox.addItem("Chocolate cake");
        removeNameBox.addItem("Vanilla cake");
        removeNameBox.addItem("Plain cake");
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem3 = new javax.swing.JCheckBoxMenuItem();
        jFrame1 = new javax.swing.JFrame();
        jFrame2 = new javax.swing.JFrame();
        jColorChooser1 = new javax.swing.JColorChooser();
        Title = new javax.swing.JLabel();
        cakeName = new javax.swing.JLabel();
        cakeWieght = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        weightTextField = new javax.swing.JTextField();
        expiryDateTextField = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        displayAllButton = new javax.swing.JButton();
        peekTopButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        mainTextArea = new javax.swing.JTextArea();
        cakeNameBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        peekLastButton = new javax.swing.JButton();
        searchByNameButton = new javax.swing.JButton();
        removeByNameButton = new javax.swing.JButton();
        clearOvenButton = new javax.swing.JButton();
        reportButton = new javax.swing.JButton();
        sortByDateButton = new javax.swing.JButton();
        sortByNameButton = new javax.swing.JButton();
        sortByWeightButton = new javax.swing.JButton();
        displayExpiringCakebutton = new javax.swing.JButton();
        cakeAgeButton = new javax.swing.JButton();
        randomButton = new javax.swing.JButton();
        searchNameBox = new javax.swing.JComboBox<>();
        removeNameBox = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("jCheckBoxMenuItem2");

        jCheckBoxMenuItem3.setSelected(true);
        jCheckBoxMenuItem3.setText("jCheckBoxMenuItem3");

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jFrame2Layout = new javax.swing.GroupLayout(jFrame2.getContentPane());
        jFrame2.getContentPane().setLayout(jFrame2Layout);
        jFrame2Layout.setHorizontalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame2Layout.setVerticalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 102, 204));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        Title.setText("QUEEN BAKERY OVEN MANAGER");

        cakeName.setBackground(new java.awt.Color(255, 102, 153));
        cakeName.setText("Select cake name:");

        cakeWieght.setText("Enter weight amount (grams):");

        jLabel3.setText("Enter Best Before Date (YYYY-MM-DD, Max 14 days): ");

        addButton.setText("1. Add cake to the oven");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        removeButton.setText("2. Remove a cake from the oven");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        displayAllButton.setText("3. View all cakes in the oven");
        displayAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayAllButtonActionPerformed(evt);
            }
        });

        peekTopButton.setText("4. View the front cake in the oven");
        peekTopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                peekTopButtonActionPerformed(evt);
            }
        });

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        mainTextArea.setColumns(20);
        mainTextArea.setRows(5);
        jScrollPane1.setViewportView(mainTextArea);

        cakeNameBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        jLabel2.setText("MAIN MENU SECTION");

        jLabel4.setText("Welcome to the delightful Java application for managing cake orders with oven magic!");

        jLabel1.setText("1. Add a cake section");

        jLabel5.setText("OTHER OPERATIONS");

        peekLastButton.setText("5. View the last cake added in the oven");
        peekLastButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                peekLastButtonActionPerformed(evt);
            }
        });

        searchByNameButton.setText("6. Search cake by name");
        searchByNameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchByNameButtonActionPerformed(evt);
            }
        });

        removeByNameButton.setText("7. Remove cake by name");
        removeByNameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeByNameButtonActionPerformed(evt);
            }
        });

        clearOvenButton.setText("8. Empty oven");
        clearOvenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearOvenButtonActionPerformed(evt);
            }
        });

        reportButton.setText("9. Generate inventory report");
        reportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportButtonActionPerformed(evt);
            }
        });

        sortByDateButton.setText("10. Sort by expiry date");
        sortByDateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortByDateButtonActionPerformed(evt);
            }
        });

        sortByNameButton.setText("11. Sort Alphabetically");
        sortByNameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortByNameButtonActionPerformed(evt);
            }
        });

        sortByWeightButton.setText("12. Sort by weight");
        sortByWeightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortByWeightButtonActionPerformed(evt);
            }
        });

        displayExpiringCakebutton.setText("13. View expiring cakes");
        displayExpiringCakebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayExpiringCakebuttonActionPerformed(evt);
            }
        });

        cakeAgeButton.setText("14. Check cake ages");
        cakeAgeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cakeAgeButtonActionPerformed(evt);
            }
        });

        randomButton.setText("15. Random cake generator");
        randomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomButtonActionPerformed(evt);
            }
        });

        searchNameBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        removeNameBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel6.setText("Oven operation output:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(173, 173, 173)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 461, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(335, 335, 335)
                                .addComponent(Title)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(159, 159, 159)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(101, 101, 101))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(cakeName)
                                            .addGap(214, 214, 214)
                                            .addComponent(cakeNameBox, 0, 189, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel3)
                                                .addComponent(cakeWieght))
                                            .addGap(27, 27, 27)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(weightTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                                                .addComponent(expiryDateTextField))))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(removeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(displayAllButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(peekTopButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(182, 182, 182)
                                            .addComponent(jLabel5))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(searchByNameButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(removeByNameButton)
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(searchNameBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(removeNameBox, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(sortByDateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(reportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(clearOvenButton, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(peekLastButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(cakeAgeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(sortByWeightButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(sortByNameButton, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(randomButton, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(displayExpiringCakebutton, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(38, 38, 38)))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(102, 102, 102))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(Title)
                .addGap(18, 18, 18)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel6))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cakeName)
                            .addComponent(cakeNameBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cakeWieght)
                            .addComponent(weightTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(expiryDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(removeButton)
                        .addGap(18, 18, 18)
                        .addComponent(displayAllButton)
                        .addGap(18, 18, 18)
                        .addComponent(peekTopButton)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(peekLastButton)
                                .addGap(13, 13, 13)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(searchByNameButton)
                                            .addComponent(searchNameBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(removeNameBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(removeByNameButton)
                                            .addComponent(displayExpiringCakebutton)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(65, 65, 65)
                                        .addComponent(clearOvenButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(reportButton)
                                            .addComponent(randomButton)))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(sortByNameButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sortByWeightButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(100, 100, 100)
                                .addComponent(cakeAgeButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sortByDateButton)
                            .addComponent(exitButton))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // Try and catch to validate user input
        try {
            
            int cakeWeight = Integer.parseInt(weightTextField.getText());
            String expiryDate = expiryDateTextField.getText();
            // Validating input fields / name, weight, expiry date before creating a new cake
            if (!isValidCakeSelection() || !isValidCakeWeight (cakeWeight) || !isValidExpiryDate (expiryDate)) {
                return; // If any of the validation fails, can't go to the next process
            }
            
            String selectedCakeName = cakeNameBox.getSelectedItem().toString();

            // Creating a new Cake object
            Cake newCake = new Cake (selectedCakeName, cakeWeight, expiryDate);
            if (ovenQueue.isFull()) {
                JOptionPane.showMessageDialog(this, "Oven is FULL! Please remove a cake before adding a new one.", "Oven Full", JOptionPane.WARNING_MESSAGE);
                return; // Exiting if any validation fails
            }
            // Adding a new cake to the oven queue
            ovenQueue.addCake(newCake);
            mainTextArea.append("Added cake:\n" + newCake);
            JOptionPane.showMessageDialog(this, "Cake added to the oven successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            
            // Clearing input fields after adding
            clearInputs();
            
            } catch (NumberFormatException e) {
                // Showing error when parsing the weight fails
                JOptionPane.showMessageDialog(this, "Please enter a valid number for the weight.", "Input Error", JOptionPane.ERROR_MESSAGE);
            }
    }//GEN-LAST:event_addButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        // Removing the front cake if the oven is not empty
        if (ovenQueue.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No cakes to remove. The oven is EMPTY!", "Oven Empty", JOptionPane.WARNING_MESSAGE);
        } else {
            Cake removedCake = (Cake) ovenQueue.removeCake();
            mainTextArea.append("Removed cake:\n" + removedCake); // Displaying the removed cake details
        }
    }//GEN-LAST:event_removeButtonActionPerformed

    private void displayAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayAllButtonActionPerformed
        // Displaying all cakes in the oven
        if (ovenQueue.isEmpty()) { 
            mainTextArea.append("No cakes in the oven. The oven is EMPTY!");
        } else {
            mainTextArea.append(ovenQueue.displayCakes());
        }
    }//GEN-LAST:event_displayAllButtonActionPerformed

    private void peekTopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_peekTopButtonActionPerformed
        // Peeking at the front cake without removing it
        if (ovenQueue.isEmpty()) {
            mainTextArea.append("No cakes in the oven. The oven is EMPTY!");
        } else {
            Cake topCake = (Cake) ovenQueue.peekFrontCake();
            mainTextArea.append("Top cake in the oven:\n" + topCake);
        }
    }//GEN-LAST:event_peekTopButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        // Exiting the program 
        System.exit(0);
        mainTextArea.append("Exiting the program . . .");
    }//GEN-LAST:event_exitButtonActionPerformed

    private void peekLastButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_peekLastButtonActionPerformed
        // Peeking at the last cake without removing it
        if (ovenQueue.isEmpty()) {
            mainTextArea.append("No cakes in the oven. The oven is EMPTY!");
        } else {
            Cake lastCake = (Cake) ovenQueue.peekLastCake();
            mainTextArea.append("Last cake added in the oven:\n" + lastCake);
        }
    }//GEN-LAST:event_peekLastButtonActionPerformed

    private void searchByNameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchByNameButtonActionPerformed
        // Searching for a cake by name from the name selection box
        String selectedCakeName = (String) searchNameBox.getSelectedItem();
        
        if (!selectedCakeName.equalsIgnoreCase("Select a Cake") && !selectedCakeName.trim().isEmpty()) {
            Cake foundCake = (Cake) ovenQueue.findCakeByName(selectedCakeName.trim());
            if (foundCake != null) {
                mainTextArea.append("Cake found by name: \n" + foundCake);
            } else {
                mainTextArea.append("No cake found with the name: " + selectedCakeName);
            }
        } else {
            JOptionPane.showMessageDialog(this,"Please select a cak name to search", "Input error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_searchByNameButtonActionPerformed

    private void clearOvenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearOvenButtonActionPerformed
        // Clearing all cakes from the oven
        if (ovenQueue.isEmpty()) {
            mainTextArea.append("No cakes to clear in the oven. The oven is EMPTY! \n");
        } else {
            // Clearing the queue if the oven isn't empty
            ovenQueue.emptyOven();
            // Clearing any output text
            mainTextArea.append("The oven has been cleared. All cakes removed.\n");
        }
    }//GEN-LAST:event_clearOvenButtonActionPerformed

    private void removeByNameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeByNameButtonActionPerformed
        // Removing a cake by its name
        String selectedCakeName = (String) removeNameBox.getSelectedItem();

        if (!selectedCakeName.equalsIgnoreCase("Select a Cake") && !selectedCakeName.trim().isEmpty()) {
            
            Cake removedCake = (Cake) ovenQueue.findCakeByName(selectedCakeName.trim());
            
            if (removedCake != null) {
                boolean found = ovenQueue.removeCakeByName(selectedCakeName.trim());
                if (found) {
                    mainTextArea.append("Cake removed by name:\n" + removedCake);
                } else {
                    mainTextArea.append("Error while removing the cake. \n");
                }
            } else {
                mainTextArea.append("No cake found with the name: \n" + cakeName);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a cake name to remove.", "Input Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_removeByNameButtonActionPerformed

    private void reportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportButtonActionPerformed
        // Generating and displaying a report of all cakes
        if (ovenQueue.isEmpty()) {
            mainTextArea.append("No cakes in the oven to report. The oven is EMPTY! \n");
        } else {
            // Get the report text from the queue
            String inventoryReport = ovenQueue.getReport();
            // Display it in the main text area
            mainTextArea.setText("=== Oven Report ===\n" + inventoryReport + "\n");
        }         
    }//GEN-LAST:event_reportButtonActionPerformed

    private void sortByDateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortByDateButtonActionPerformed
        // Sorting cakes by expiry date
        if (ovenQueue.isEmpty()) {
            mainTextArea.append("No cakes to sort. The oven is EMPTY!");
        } else {
            mainTextArea.append("Cakes sorted by expiry date:\n" + ovenQueue.getCakeSortedByExpiry());
        }
    }//GEN-LAST:event_sortByDateButtonActionPerformed

    private void sortByNameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortByNameButtonActionPerformed
        // Sorting cakes by name
        if (ovenQueue.isEmpty()) {
            mainTextArea.append("No cakes to sort. The oven is EMPTY!");
        } else {
            mainTextArea.append("Cakes sorted by name:\n" + ovenQueue.getCakeSortedByName());
        }
    }//GEN-LAST:event_sortByNameButtonActionPerformed

    private void sortByWeightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortByWeightButtonActionPerformed
        // Sorting cakes by weight
        if (ovenQueue.isEmpty()) {
            mainTextArea.append("No cakes to sort. The oven is EMPTY!");
        } else {
            mainTextArea.append("Cakes sorted by expiry date:\n" + ovenQueue.getCakeSortedByWeight());
        }
    }//GEN-LAST:event_sortByWeightButtonActionPerformed

    private void displayExpiringCakebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayExpiringCakebuttonActionPerformed
        // Displaying cakes that are expiring within 3 days
        if (ovenQueue.isEmpty()) {
            mainTextArea.append("No cakes to filter. The oven is EMPTY!");
        } else {
            mainTextArea.append("Cakes expiring within 3 days:\n" + ovenQueue.getCakeExpiringSoon(3));
        }
    }//GEN-LAST:event_displayExpiringCakebuttonActionPerformed

    private void cakeAgeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cakeAgeButtonActionPerformed
        // Showing the age of each cake in the oven
        if (ovenQueue.isEmpty()) {
            mainTextArea.append("No cakes in the oven. The oven is EMPTY!");
        } else {
            mainTextArea.append("Cake ages (in days):\n" + ovenQueue.getCakeAges());
        }
    }//GEN-LAST:event_cakeAgeButtonActionPerformed

    private void randomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomButtonActionPerformed
        // Generating and adding a random cake to the oven
        if (ovenQueue.isFull()) {
            JOptionPane.showMessageDialog(this, "Oven is FULL! Remove a cake first.", "Oven FULL!", JOptionPane.WARNING_MESSAGE);
            return;
        } else{
            Cake randomCake = (Cake) ovenQueue.generateRandomCake();
            ovenQueue.addCake(randomCake);
            mainTextArea.append("Random cake added.\n" + ovenQueue.peekLastCake());
        }  
    }//GEN-LAST:event_randomButtonActionPerformed

    // Validating if the best-before date is in the correct format and within the required range
    private boolean isValidExpiryDate(String expiryDate) {
        // Regular expression to check if the date is in the correct format YYYY-MM-DD
        String regex = "^(\\d{4})-(\\d{2})-(\\d{2})$";
        if (!expiryDate.matches(regex)) { // If the date doesn't match the format
            JOptionPane.showMessageDialog(this, "Invalid date format. Please use YYYY-MM-DD.", "Date Format Error", JOptionPane.ERROR_MESSAGE);
            return false; // Returning false for invalid format
        }

        try {
            // Creating a SimpleDateFormat object to converting the date
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
            simpleDateFormat.setLenient(false); // Disabling lenient parsing to ensure strict date validation

            // Converting the expiry date string into a Date object
            Date bestBefore = simpleDateFormat.parse(expiryDate);

            // Split the date string to extract the year
            String[] dateParts = expiryDate.split("-");
            int year = Integer.parseInt(dateParts[0]); // Converting the year part to an integer

            // Check if the year is within a valid range (between 1000 and 9999)
            if (year < 1000 || year > 9999) {
                JOptionPane.showMessageDialog(this, "Invalid year. Please enter a valid year (YYYY).", "Date Format Error", JOptionPane.ERROR_MESSAGE);
                return false; // Returning false if the year is out of range
            }

            // Getting the current date
            Date timePlaced = new Date();
            // Calculating the date two weeks from today
            long twoWeeksInMillis = 14L * 24 * 60 * 60 * 1000; // 14 days in milliseconds
            Date twoWeeksFromNow = new Date(timePlaced.getTime() + twoWeeksInMillis);

            // Checking if the best-before date is in the past
            if (bestBefore.before(timePlaced)) {
                JOptionPane.showMessageDialog(this, "Best-before date cannot be in the past.", "Date Format Error", JOptionPane.ERROR_MESSAGE);
                return false; // Returning false if the date is before today
            }

            // Check if the best-before date is more than two weeks from today
            if (bestBefore.after(twoWeeksFromNow)) {
                JOptionPane.showMessageDialog(this, "Best-before date must be within two weeks from today.", "Date Format Error", JOptionPane.ERROR_MESSAGE);
                return false; // Return false if the date is too far in the future
            }

            // If all checks pass, return true indicating a valid expiry date
            return true;

        } catch (HeadlessException | NumberFormatException | ParseException e) { // Any exceptions during date conversion
            JOptionPane.showMessageDialog(this, "Invalid date. Please use YYYY-MM-DD.", "Date Format Error", JOptionPane.ERROR_MESSAGE);
            return false; // Returning false if an exception occurs
        }
    }

    // Validating if the cake weight is a valid positive number
    private boolean isValidCakeWeight(int cakeWeight) {
        if (cakeWeight <= 0) { // Checking if the weight is zero or negative
            JOptionPane.showMessageDialog(this, "Cake weight must be a positive number.", "Weight Error", JOptionPane.ERROR_MESSAGE);
            return false; // Returning false if the weight is not a positive number
        }
        return true; // Returning true if the weight is a valid number
    }
    // Validating if the cake name is selected
    private boolean isValidCakeSelection() {
        String selectedCakeName = (String) cakeNameBox.getSelectedItem(); 

        // Check if the default option or no option is selected
        if (selectedCakeName.equalsIgnoreCase("Select a Cake")) { //if no cake name is selected
            JOptionPane.showMessageDialog(this, "Please select a valid cake name.", "Selection Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        return true; // Valid selection made
    }
    
    private void clearInputs() {
        cakeNameBox.setSelectedIndex(0);
        weightTextField.setText("");
        expiryDateTextField.setText("");
    }

    /**
     * @param args the command line arguments
     */
    private void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CakeGUI().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Title;
    private javax.swing.JButton addButton;
    private javax.swing.JButton cakeAgeButton;
    private javax.swing.JLabel cakeName;
    private javax.swing.JComboBox<String> cakeNameBox;
    private javax.swing.JLabel cakeWieght;
    private javax.swing.JButton clearOvenButton;
    private javax.swing.JButton displayAllButton;
    private javax.swing.JButton displayExpiringCakebutton;
    private javax.swing.JButton exitButton;
    private javax.swing.JTextField expiryDateTextField;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem3;
    private javax.swing.JColorChooser jColorChooser1;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JFrame jFrame2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea mainTextArea;
    private javax.swing.JButton peekLastButton;
    private javax.swing.JButton peekTopButton;
    private javax.swing.JButton randomButton;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton removeByNameButton;
    private javax.swing.JComboBox<String> removeNameBox;
    private javax.swing.JButton reportButton;
    private javax.swing.JButton searchByNameButton;
    private javax.swing.JComboBox<String> searchNameBox;
    private javax.swing.JButton sortByDateButton;
    private javax.swing.JButton sortByNameButton;
    private javax.swing.JButton sortByWeightButton;
    private javax.swing.JTextField weightTextField;
    // End of variables declaration//GEN-END:variables
}
