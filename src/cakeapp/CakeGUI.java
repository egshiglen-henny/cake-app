/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package cakeapp;

import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;

/**
 *
 * @author egshi
 */
public class CakeGUI extends javax.swing.JFrame {

    /**
     * Creates new form CakeGUI
     */
    
    private CakeQueueInterface ovenQueue = new CakeQueue();
    public CakeGUI() {
        initComponents();
        initializeCakeNameBox();
        
       
    }
    
    private void initializeCakeNameBox(){
        cakeNameBox.removeAllItems();
        cakeNameBox.addItem("Pineapple cake");
        cakeNameBox.addItem("Strawberry cake");
        cakeNameBox.addItem("Chocolate cake");
        cakeNameBox.addItem("Vanilla cake");
        cakeNameBox.addItem("Plain cake");
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem3 = new javax.swing.JCheckBoxMenuItem();
        jFrame1 = new javax.swing.JFrame();
        jFrame2 = new javax.swing.JFrame();
        jColorChooser1 = new javax.swing.JColorChooser();
        Title = new javax.swing.JLabel();
        cakeName = new javax.swing.JLabel();
        cakeWieght = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        weightTextField = new javax.swing.JTextField();
        expiryDateTextField = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        displayAllButton = new javax.swing.JButton();
        peekTopButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        mainTextArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        cakeNameBox = new javax.swing.JComboBox<>();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("jCheckBoxMenuItem2");

        jCheckBoxMenuItem3.setSelected(true);
        jCheckBoxMenuItem3.setText("jCheckBoxMenuItem3");

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jFrame2Layout = new javax.swing.GroupLayout(jFrame2.getContentPane());
        jFrame2.getContentPane().setLayout(jFrame2Layout);
        jFrame2Layout.setHorizontalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame2Layout.setVerticalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 102, 204));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        Title.setText("CAKE APPLICATION");

        cakeName.setText("Cake name:");

        cakeWieght.setText("Weight (grams):");

        jLabel3.setText("Best Before Date ((YYYY-MM-DD)");

        weightTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weightTextFieldActionPerformed(evt);
            }
        });

        expiryDateTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expiryDateTextFieldActionPerformed(evt);
            }
        });

        addButton.setText("Add a cake");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        removeButton.setText("Remove a cake");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        displayAllButton.setText("View all cakes");
        displayAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayAllButtonActionPerformed(evt);
            }
        });

        peekTopButton.setText("View the top cake");
        peekTopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                peekTopButtonActionPerformed(evt);
            }
        });

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        mainTextArea.setColumns(20);
        mainTextArea.setRows(5);
        jScrollPane1.setViewportView(mainTextArea);

        jLabel1.setText("WELCOME TO CAKE APPLICATION! Here you can ");

        cakeNameBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(226, 226, 226)
                                .addComponent(Title))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(74, 74, 74)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(cakeName)
                                            .addComponent(cakeWieght)
                                            .addComponent(jLabel3))
                                        .addGap(60, 60, 60))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(27, 27, 27)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(expiryDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(weightTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(displayAllButton)
                                    .addComponent(peekTopButton)
                                    .addComponent(exitButton)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(addButton)
                                        .addComponent(removeButton))
                                    .addComponent(cakeNameBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(9, 9, 9)))
                .addContainerGap(105, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Title)
                .addGap(25, 25, 25)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cakeName)
                            .addComponent(cakeNameBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cakeWieght)
                            .addComponent(weightTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(expiryDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(removeButton)
                        .addGap(18, 18, 18)
                        .addComponent(displayAllButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(peekTopButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(exitButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 97, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        try {
            String cakeName = cakeNameBox.getSelectedItem().toString();
            int cakeWeight = Integer.parseInt(weightTextField.getText());
            String expiryDate = expiryDateTextField.getText();
            
            // Validate inputs
            if (!isValidCakeSelection() || !isValidCakeWeight (cakeWeight) || !isValidExpiryDate (expiryDate)) {
                return; // If any of the validation fails, can't go to the next process
            }
            
            // Creating a new Cake object
            Cake newCake = new Cake (cakeName, cakeWeight, expiryDate);
            if (ovenQueue.isFull()) {
                JOptionPane.showMessageDialog(this, "Oven is FULL! Please remove a cake before adding a new one.", "Oven Full", JOptionPane.WARNING_MESSAGE);
                return;
            }
            ovenQueue.addCake(newCake);
            mainTextArea.setText("Added cake:\n" + newCake);
            JOptionPane.showMessageDialog(this, "Cake added to the oven successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            clearInputs();
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Please enter a valid number for the weight.", "Input Error", JOptionPane.ERROR_MESSAGE);
            }
//        JOptionPane.showMessageDialog(this, "Invalid weight. Please enter a value between 1 and 2000 grams.", "Input Error", JOptionPane.ERROR_MESSAGE);

        
    }//GEN-LAST:event_addButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        if (ovenQueue.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No cakes to remove. The oven is EMPTY!", "Oven Empty", JOptionPane.WARNING_MESSAGE);
        } else {
            Cake removedCake = (Cake) ovenQueue.removeCake();
            mainTextArea.setText("Removed cake:\n" + removedCake);
        }
    }//GEN-LAST:event_removeButtonActionPerformed

    private void displayAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayAllButtonActionPerformed
        if (ovenQueue.isEmpty()) {
            mainTextArea.setText("No cakes in the oven. The oven is EMPTY!");
        } else {
            mainTextArea.setText(ovenQueue.displayCakes());
        }
    }//GEN-LAST:event_displayAllButtonActionPerformed

    private void peekTopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_peekTopButtonActionPerformed
        if (ovenQueue.isEmpty()) {
            mainTextArea.setText("No cakes in the oven. The oven is EMPTY!");
        } else {
            Cake topCake = (Cake) ovenQueue.peekFrontCake();
            mainTextArea.setText("Top cake in the oven:\n" + topCake);
        }
    }//GEN-LAST:event_peekTopButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(0);
        mainTextArea.setText("Exiting the program . . .");
    }//GEN-LAST:event_exitButtonActionPerformed

    private void weightTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weightTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_weightTextFieldActionPerformed

    private void expiryDateTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expiryDateTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_expiryDateTextFieldActionPerformed

    // Validating if the best-before date is in the correct format and within the required range
    private boolean isValidExpiryDate(String expiryDate) {
        // Regular expression to check if the date is in the correct format YYYY-MM-DD
        String regex = "^(\\d{4})-(\\d{2})-(\\d{2})$";
        if (!expiryDate.matches(regex)) { // If the date doesn't match the format
            JOptionPane.showMessageDialog(this, "Invalid date format. Please use YYYY-MM-DD.", "Date Format Error", JOptionPane.ERROR_MESSAGE);
            return false; // Returning false for invalid format
        }

        try {
            // Creating a SimpleDateFormat object to converting the date
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
            simpleDateFormat.setLenient(false); // Disabling lenient parsing to ensure strict date validation

            // Converting the expiry date string into a Date object
            Date bestBefore = simpleDateFormat.parse(expiryDate);

            // Split the date string to extract the year
            String[] dateParts = expiryDate.split("-");
            int year = Integer.parseInt(dateParts[0]); // Converting the year part to an integer

            // Check if the year is within a valid range (between 1000 and 9999)
            if (year < 1000 || year > 9999) {
                JOptionPane.showMessageDialog(this, "Invalid year. Please enter a valid year (YYYY).", "Date Format Error", JOptionPane.ERROR_MESSAGE);
                return false; // Returning false if the year is out of range
            }

            // Getting the current date
            Date currentDate = new Date();
            // Calculating the date two weeks from today
            long twoWeeksInMillis = 14L * 24 * 60 * 60 * 1000; // 14 days in milliseconds
            Date twoWeeksFromNow = new Date(currentDate.getTime() + twoWeeksInMillis);

            // Checking if the best-before date is in the past
            if (bestBefore.before(currentDate)) {
                JOptionPane.showMessageDialog(this, "Best-before date cannot be in the past.", "Date Format Error", JOptionPane.ERROR_MESSAGE);
                return false; // Returning false if the date is before today
            }

            // Check if the best-before date is more than two weeks from today
            if (bestBefore.after(twoWeeksFromNow)) {
                JOptionPane.showMessageDialog(this, "Best-before date must be within two weeks from today.", "Date Format Error", JOptionPane.ERROR_MESSAGE);
                return false; // Return false if the date is too far in the future
            }

            // If all checks pass, return true indicating a valid expiry date
            return true;

        } catch (Exception e) { // Any exceptions during date conversion
            JOptionPane.showMessageDialog(this, "Invalid date. Please use YYYY-MM-DD.", "Date Format Error", JOptionPane.ERROR_MESSAGE);
            return false; // Returning false if an exception occurs
        }
    }

    // Validating if the cake weight is a valid positive number
    private boolean isValidCakeWeight(int cakeWeight) {
        if (cakeWeight <= 0) { // Checking if the weight is zero or negative
            JOptionPane.showMessageDialog(this, "Cake weight must be a positive number.", "Weight Error", JOptionPane.ERROR_MESSAGE);
            return false; // Returning false if the weight is not a positive number
        }
        return true; // Returning true if the weight is a valid number
    }
    // Validating if the cake name is selected
    private boolean isValidCakeSelection() {
        String selectedCake = (String) cakeNameBox.getSelectedItem(); 

        // Check if the default option or no option is selected
        if (selectedCake == null || selectedCake.equals("Select a Cake")) { //if no cake name is selected
            JOptionPane.showMessageDialog(this, "Please select a valid cake name.", "Selection Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        return true; // Valid selection made
    }
    
    private void clearInputs() {
        cakeNameBox.setSelectedIndex(0);
        weightTextField.setText("");
        expiryDateTextField.setText("");
    }

    /**
     * @param args the command line arguments
     */
    private void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CakeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CakeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CakeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CakeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CakeGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Title;
    private javax.swing.JButton addButton;
    private javax.swing.JLabel cakeName;
    private javax.swing.JComboBox<String> cakeNameBox;
    private javax.swing.JLabel cakeWieght;
    private javax.swing.JButton displayAllButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JTextField expiryDateTextField;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem3;
    private javax.swing.JColorChooser jColorChooser1;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JFrame jFrame2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea mainTextArea;
    private javax.swing.JButton peekTopButton;
    private javax.swing.JButton removeButton;
    private javax.swing.JTextField weightTextField;
    // End of variables declaration//GEN-END:variables
}
